public class Planning {
    /*
        data validation and regular expressions by processing lines of input from a data file
        comma separated values
        unspecfied amount of lines: while loop
        output yes or no
        easy to indicate file input
         */

    // student: 9 digits. acceptable formats: 000000000, 000 000 000
       // regex = ^\d{9}$
    // password: a-z, A-Z, 0-9, ascii printable special characters, minimum 12 characters
       // ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{12,}$
    // username: a-z, A-Z, 0-9, minimum 3 characters, maximum 20 characters
    // email: username@domain.TLD, username, domain and TLD will conform to the rules above for a “username” field.
    //          There will only be one TLD (i.e. no multiples like domain.co.uk)
    //previous: Confirm that this data field is identical to the previous line’s data field (excluding whitespace)
    //phone: A North American phone number. Possible formats: 1234567890, 123.456.7890, 123-456-7890, (123) 456-7890
    //postal: A Canadian postal code. Possible formats: A0A0A0, A0A 0A0
    //address: A string field containing a-z, A-Z, 0-9, periods and dashes
    //binary: A single binary string, must contain only 1s and 0s with no breaks between digits
    //bio: A generic string field. Report “no” only if the field contains any html tags.
}
